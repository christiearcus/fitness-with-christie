{"version":3,"sources":["fitness-list/index.js","lib/data-shuffler.js","hiit/hiitData.js","hiit/index.js","stretch/stretchData.js","stretch/index.js","App.js","serviceWorker.js","index.js"],"names":["FitnessList","items","useState","window","innerWidth","windowSize","className","to","class","map","item","dataShuffler","data","sort","Math","random","slice","Hiit","exercises","Stretch","stretches","Home","App","basename","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUA2BeA,G,YArBK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEZC,oBADL,kBAAMC,OAAOC,cACtBC,EAF0B,oBAIjC,OACE,oCACE,yBAAKC,UAAU,oBACb,kBAAC,IAAD,CAAMA,UAAU,kBAAkBC,GAAG,KACnC,uBAAGC,MAAM,sBACRH,EAAa,IAAM,eAAiB,KAGzC,wBAAIC,UAAU,gBACXL,EAAMQ,KAAI,SAACC,GACV,OAAO,4BAAKA,UCfPC,EALM,SAACC,GAAD,OACnBA,EAAKC,MAAK,WACR,MAAO,GAAMC,KAAKC,aCoBPJ,IApBG,CAChB,cACA,UACA,mBACA,aACA,aACA,qBACA,WACA,kBACA,mBACA,eACA,UACA,oBACA,SACA,wBACA,YACA,oBACA,aAGqCK,MAAM,EAAG,ICdjCC,EAJF,WACX,OAAO,kBAAC,EAAD,CAAahB,MAAOiB,KCSdP,IAZG,CAChB,eACA,YACA,cACA,SACA,eACA,qBACA,qBACA,+BACA,eAGqCK,MAAM,EAAG,GCNjCG,EAJC,WACd,OAAO,kBAAC,EAAD,CAAalB,MAAOmB,KCGvBC,G,MAAO,WACX,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,gBACb,2DACA,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAMA,UAAU,kBAAkBC,GAAG,SAArC,QAGA,kBAAC,IAAD,CAAMD,UAAU,kBAAkBC,GAAG,YAArC,gBA2BKe,MAlBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCzBUC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23a9543d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../App.css\";\nimport \"../Fitness.css\";\n\nconst FitnessList = ({ items }) => {\n  const getSize = () => window.innerWidth;\n  const [windowSize] = useState(getSize);\n\n  return (\n    <>\n      <div className=\"Fitness-list-nav\">\n        <Link className=\"App-button-link\" to=\"/\">\n          <i class=\"fas fa-arrow-left\"></i>\n          {windowSize > 768 ? \"Back to home\" : \"\"}\n        </Link>\n      </div>\n      <ul className=\"Fitness-list\">\n        {items.map((item) => {\n          return <li>{item}</li>;\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default FitnessList;\n","const dataShuffler = (data) =>\n  data.sort(() => {\n    return 0.5 - Math.random();\n  });\n\nexport default dataShuffler;\n","import dataShuffler from \"../lib/data-shuffler\";\n\nconst exercises = [\n  \"calf raises\",\n  \"burpees\",\n  \"plank star jumps\",\n  \"toe points\",\n  \"plank taps\",\n  \"squat lift or jump\",\n  \"crunches\",\n  \"regular push up\",\n  \"bicycle crunches\",\n  \"shrimp squat\",\n  \"pop ups\",\n  \"mountain climbers\",\n  \"lunges\",\n  \"tricep dips / push up\",\n  \"courtsies\",\n  \"bend leg toe taps\",\n  \"wall sit\",\n];\n\nexport default dataShuffler(exercises).slice(0, 10);\n","import React from \"react\";\nimport FitnessList from \"../fitness-list\";\nimport exercises from \"./hiitData\";\n\nconst Hiit = () => {\n  return <FitnessList items={exercises} />;\n};\n\nexport default Hiit;\n","import dataShuffler from \"../lib/data-shuffler\";\n\nconst stretches = [\n  \"forward fold\",\n  \"frog pose\",\n  \"pigeon pose\",\n  \"splits\",\n  \"child's pose\",\n  \"lotus forward fold\",\n  \"lizard lunge twist\",\n  \"forward folded cow face pose\",\n  \"puppy pose\",\n];\n\nexport default dataShuffler(stretches).slice(0, 5);\n","import React from \"react\";\nimport FitnessList from \"../fitness-list\";\nimport stretches from \"./stretchData\";\n\nconst Stretch = () => {\n  return <FitnessList items={stretches} />;\n};\n\nexport default Stretch;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Hiit from \"./hiit\";\nimport Stretch from \"./stretch\";\n\nimport \"./App.css\";\nimport \"./Normalize.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"Home-welcome\">\n        <h1>How do you want to workout?</h1>\n        <div className=\"Home-links\">\n          <Link className=\"App-button-link\" to=\"/hiit\">\n            HIIT\n          </Link>\n          <Link className=\"App-button-link\" to=\"/stretch\">\n            Stretch\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <Switch>\n        <Route path=\"/stretch\">\n          <Stretch />\n        </Route>\n        <Route path=\"/hiit\">\n          <Hiit />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}